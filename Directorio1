import csv
from ListaContactos import *
from datetime import datetime

def merge(izquierda, derecha):
    resultado = []
    i = j = 0

    while i < len(izquierda) and j < len(derecha):
        if (izquierda[i].nombre, izquierda[i].apellidos) <= (derecha[j].nombre, derecha[j].apellidos):
            resultado.append(izquierda[i])
            i += 1
        else:
            resultado.append(derecha[j])
            j += 1

    resultado += izquierda[i:]
    resultado += derecha[j:]

    return resultado

def crear_contacto(fila):
    """
    Crea un objeto de contacto (Alumno, Profesor o Coordinador) a partir de los datos de una fila del archivo CSV.

    Args:
        fila (list): Una lista que contiene los datos de una fila del archivo CSV.

    Returns:
        Alumno | Profesor | Coordinador: El objeto de contacto creado, o None si el tipo de contacto no es válido.
    """
    try:
        tipo = fila[0].capitalize()
        nombre = fila[1]
        apellidos = fila[2]
        nacimiento = datetime.strptime(fila[3], "%d/%m/%Y").date()
        email = fila[4]
        celular = int(fila[5]) if fila[5] else 0
        carrera = fila[6]
        num_cuenta = int(fila[7]) if fila[7] else None
        semestre = int(fila[8]) if fila[8] else None
        materias = fila[9]
        num_profesor = int(fila[10]) if fila[10] else None
        salario = float(fila[11]) if fila[11] else None
        oficina = int(fila[12]) if fila[12] else None
        grupos = fila[13]
        departamento = fila[14]
        num_coordinador = int(fila[15]) if fila[15] else None
        extension = int(fila[16]) if fila[16] else None

        if tipo == "Alumno":
            contacto = Alumno(nombre, apellidos, nacimiento, email, celular, carrera, num_cuenta, semestre,
                              materias)
        elif tipo == "Profesor":
            contacto = Profesor(nombre, apellidos, nacimiento, email, celular, carrera, num_profesor, departamento,
                                salario, oficina, grupos)
        elif tipo == "Coordinador":
            contacto = Coordinador(nombre, apellidos, nacimiento, email, celular, carrera, num_coordinador,
                                   departamento, extension, salario)
        else:
            print(f"Tipo de contacto no válido: {tipo}")
            return None  # Devolver None si el tipo no es válido

        return contacto

    except (ValueError, IndexError) as e:
        print(f"Error al procesar la fila: {fila}")
        print(f"Error: {e}")
        return None  # Devolver None en caso de error

class Directorio:
    def __init__(self):
        self.contactos = Lista()

    def agregar_contacto(self, contacto):
        # Buscar si ya existe un contacto con el mismo nombre y apellidos
        existe = False
        for c in self.contactos:
            if c.nombre == contacto.nombre and c.apellidos == contacto.apellidos:
                existe = True
                break

        # Agregar el contacto si no existe
        if not existe:
            self.contactos.agregar(contacto)
        else:
            print(f"El contacto {contacto.nombre} {contacto.apellidos} ya existe en el directorio.")

    def eliminar_contacto(self, criterio, valor):
        """Elimina un contacto por el criterio y valor dado."""

        if criterio == "nombre":  # Eliminar por nombre y apellidos
            nombre, apellidos = valor  # Asumiendo que valor es una tupla (nombre, apellidos)
            for contacto in self.contactos:  # Recorre la lista simplemente ligada
                if contacto.nombre == nombre and contacto.apellidos == apellidos:
                    self.contactos.eliminar(contacto)
                    return True  # Indica que se eliminó un contacto
            return False  # No se encontró el contacto

        elif criterio == "celular":  # Eliminar por celular
            for contacto in self.contactos:  # Recorre la lista simplemente ligada
                if contacto.celular == valor:  # Verifica si el celular coincide
                    self.contactos.eliminar(contacto)  # Elimina el contacto si coincide
                    return True  # Indica que se eliminó un contacto
            return False  # No se encontró el contacto

        elif criterio == "numero":  # Eliminar por número de cuenta, profesor o coordinador
            for contacto in self.contactos:  # Recorre la lista simplemente ligada
                if isinstance(contacto,
                              Alumno) and contacto.num_cuenta == valor:  # Verificar si es un alumno y coincide el número de cuenta
                    self.contactos.eliminar(contacto)
                    return True
                elif isinstance(contacto,
                                Profesor) and contacto.num_profesor == valor:  # Verificar si es un profesor y coincide el número de profesor
                    self.contactos.eliminar(contacto)
                    return True
                elif isinstance(contacto,
                                Coordinador) and contacto.num_coordinador == valor:  # Verificar si es un coordinador y coincide el número de coordinador
                    self.contactos.eliminar(contacto)
                    return True
            return False  # No se encontró el contacto

        else:
            print("Criterio de eliminación no válido.")
            return False

    def buscar_contacto(self, criterio, valor):
        resultados = Lista()
        for contacto in self.contactos:
            if criterio == "nombre":
                if contacto.nombre == valor or contacto.apellidos == valor:
                    resultados.agregar(contacto)
            elif criterio == "celular":
                if contacto.celular == int(valor):  # Convertir a entero si es necesario
                    resultados.agregar(contacto)
            elif criterio == "numero":
                if (isinstance(contacto, Alumno) and contacto.num_cuenta == valor) or \
                        (isinstance(contacto, Profesor) and contacto.num_profesor == valor) or \
                        (isinstance(contacto, Coordinador) and contacto.num_coordinador == valor):
                    resultados.agregar(contacto)
        return resultados  # Devolver la lista de resultados

    def actualizar_contacto(self, nombre, apellidos, nuevo_contacto):
        """Actualiza un contacto existente con nuevos datos."""
        # Buscar el contacto a actualizar usando la función buscar_contactos
        # Iterar sobre los nodos de la lista para encontrar el contacto por nombre y apellidos
        actual = self.contactos.inicio  # Empezar desde el inicio de la lista
        nodo = None  # Inicializar el nodo que se buscará
        while actual is not None:
            if actual.elemento.nombre == nombre and actual.elemento.apellidos == apellidos:
                nodo = actual  # Asignar el nodo si se encuentra el contacto
                break  # Salir del bucle si se encuentra el contacto
            actual = actual.siguiente  # Avanzar al siguiente nodo

        if nodo is None:
            print("Contacto no encontrado.")
            return False
        else:
            # Verificar si los apellidos coinciden también
            if nodo.elemento.apellidos == apellidos:
                # Reemplazar el contacto original con el nuevo contacto en la lista
                nodo.elemento = nuevo_contacto  # Actualizar el nodo con el nuevo contacto
                return True
            else:
                print("Contacto no encontrado (apellidos no coinciden).")
                return False  # No se encontró el contacto

    def ordenar_contactos(self, contactos):
        """
        Ordena la lista implementando el algoritmo Merge Sort.

        Args:
            contactos (lista): Lista de objetos Contacto a ordenar.

        Returns:
            lista: Lista de contactos ordenada alfabéticamente por nombre y apellidos.
        """
        if len(contactos) <= 1:
            return contactos

        mitad = len(contactos) // 2
        izquierda = contactos[:mitad]
        derecha = contactos[mitad:]

        izquierda = self.ordenar_contactos(izquierda)
        derecha = self.ordenar_contactos(derecha)

        return merge(izquierda, derecha)

    def listar_contactos(self, criterio=None, valor=None):
        """Lista los contactos, opcionalmente filtrando por criterio y valor."""

        actual = self.contactos.inicio  # Empezar desde el inicio de la lista
        while actual is not None:
            contacto = actual.elemento  # Obtener el contacto del nodo actual

            # Verificar si el contacto cumple con el criterio de búsqueda
            if criterio is None:  # Si no hay criterio, mostrar todos los contactos (Opción 10)
                mostrar_contacto = True
            elif criterio == "tipo":
                mostrar_contacto = isinstance(contacto, valor)
            elif criterio == "email":  # Opción 11
                # Verificar si el contacto tiene un atributo 'email' y si no es el predeterminado
                mostrar_contacto = hasattr(contacto, 'email') and contacto.email != "usuario@domino.com"
            elif criterio == "carrera":
                mostrar_contacto = hasattr(contacto, "carrera") and contacto.carrera == valor
            elif criterio == "salario":  # Opción 13
                mostrar_contacto = hasattr(contacto, "salario") and contacto.salario == valor
            else:
                mostrar_contacto = False

            # Mostrar el contacto si cumple con el criterio
            if mostrar_contacto:
                print(contacto)  # Imprimir el contacto

            actual = actual.siguiente  # Avanzar al siguiente nodo

    def vaciar_directorio(self):
        self.contactos.vaciar()
        print("El directorio se ha vaciado.")

    @staticmethod
    def obtener_datos_contacto(tipo):
        datos = {}
        atributos_comunes = ["nombre", "apellidos", "nacimiento", "email", "celular", "carrera"]
        atributos_especificos = {
            "Alumno": ["num_cuenta", "semestre", "materias"],
            "Profesor": ["num_profesor", "departamento", "salario", "oficina", "grupos"],
            "Coordinador": ["num_coordinador", "departamento", "extension", "salario"]
        }

        # Obtener datos comunes
        for atributo in atributos_comunes:
            while True:
                try:
                    if atributo == "nacimiento":
                        valor = datetime.strptime(input(f"Fecha de {atributo} (dd/mm/yyyy): "), "%d/%m/%Y").date()
                    elif atributo in ["celular", "num_cuenta", "semestre", "num_profesor", "salario", "oficina",
                                      "num_coordinador", "extension"]:
                        valor = int(input(f"{atributo.capitalize()}: "))  # Convertir a entero si es necesario
                    elif atributo == "email":
                        valor = input(f"{atributo.capitalize()}: ")
                        if not validate_email(valor):
                            raise ValueError("Formato de correo inválido.")
                    else:
                        valor = input(f"{atributo.capitalize()}: ")
                        if not valor.replace(" ", "").isalpha():
                            raise ValueError(
                                f"{atributo.capitalize()} inválido. Solo se permiten letras y espacios.")
                    datos[atributo] = valor
                    break
                except ValueError as e:
                    print(e)

        # Obtener datos específicos del tipo de contacto
        for atributo in atributos_especificos[tipo]:
            while True:
                try:
                    if atributo in ["salario"]:
                        valor = float(input(f"{atributo.capitalize()}: "))
                    else:
                        valor = input(f"{atributo.capitalize()}: ")  # Mantener como cadena
                    datos[atributo] = valor
                    break
                except ValueError:
                    print(f"{atributo.capitalize()} inválido. Debe ser un número.")

        return datos

    def verificar_contactos(self):
        """Verifica si hay contactos en el directorio.

        Returns:
            True si hay contactos, False si no hay contactos.
        """
        if self.contactos.esta_vacia():
            print("No hay contactos en el directorio. Agrega contactos primero.")
            return False  # Retornar False si la lista está vacía
        return True  # Retornar True si la lista no está vacía

    def leer_archivo(self, archivo_csv):
        """
        Lee un archivo CSV y agrega los contactos al directorio.
        """
        try:
            with open(archivo_csv, newline='', encoding='utf-8') as csvfile:
                lector = csv.reader(csvfile)
                next(lector)  # Saltar la primera fila si contiene encabezados
                for fila in lector:
                    contacto = crear_contacto(fila)  # Llamar a la función externa
                    if contacto:  # Agregar solo si se creó un contacto válido
                        self.agregar_contacto(contacto)
                        print(f"Contacto agregado: {contacto}")

        except FileNotFoundError:
            print(f"Error: No se encontró el archivo {archivo_csv}")


    def guardar_archivo(self, archivo_csv):
        if not archivo_csv.endswith(".csv"):
            archivo_csv += ".csv"
        with open(archivo_csv, mode='w', newline='', encoding='utf-8') as csvfile:
            escritor = csv.writer(csvfile)

            # Agregar la fila de encabezados
            encabezados = ["Tipo", "Nombre", "Apellidos", "Nacimiento", "Email", "Celular",
                           "Carrera", "Num_Cuenta", "Semestre", "Materias", "Num_Profesor",
                           "Departamento", "Salario", "Oficina", "Grupos", "Num_Coordinador",
                           "Extension"]
            escritor.writerow(encabezados)

            # Verificar si la lista de contactos no está vacía
            if self.contactos.esta_vacia():
                print("No hay contactos para guardar.")
                return

            # Iterar sobre la lista de contactos usando un iterador
            it = iter(self.contactos)  # Obtener el iterador
            try:
                while True:
                    contacto = next(it)  # Obtener el siguiente contacto

                    if isinstance(contacto, Alumno):
                        fila = ["Alumno", contacto.nombre, contacto.apellidos,
                                contacto.nacimiento.strftime("%d/%m/%Y"), contacto.email,
                                contacto.celular, contacto.carrera, contacto.num_cuenta,
                                contacto.semestre, contacto.materias, "", "", "", "", "", "", ""]
                    elif isinstance(contacto, Profesor):
                        fila = ["Profesor", contacto.nombre, contacto.apellidos,
                                contacto.nacimiento.strftime("%d/%m/%Y"), contacto.email,
                                contacto.celular, contacto.carrera, "", "", "",
                                contacto.num_profesor, contacto.departamento, contacto.salario,
                                contacto.oficina, contacto.grupos, "", ""]
                    elif isinstance(contacto, Coordinador):
                        fila = ["Coordinador", contacto.nombre, contacto.apellidos,
                                contacto.nacimiento.strftime("%d/%m/%Y"), contacto.email,
                                contacto.celular, contacto.carrera, "", "", "", "",
                                contacto.departamento, contacto.salario, "", "",
                                contacto.num_coordinador, contacto.extension]
                    else:
                        fila = []  # Manejar el caso en que el tipo de contacto no sea reconocido

                    escritor.writerow(fila)  # Escribir la fila en el archivo CSV

            except StopIteration:
                pass  # Fin de la iteración
