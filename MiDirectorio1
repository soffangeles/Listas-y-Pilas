from Directorio import *

if __name__ == "__main__":
    print("Bienvenido a su Directorio :D")
    directorio = Directorio()
    archivo_leido = None  # Inicializar como None

    while True:
        opcion_inicio = input("¿Desea iniciar con el directorio en blanco o leer desde un archivo? (b/a): ").lower()
        if opcion_inicio in ("b", "a"):
            break
        else:
            print("Opción inválida. Introduce 'b' para iniciar en blanco o 'a' para leer desde un archivo.")

    if opcion_inicio == "a":
        while True:
            archivo_csv = input("Introduce el nombre del archivo CSV a leer: ")
            try:
                directorio.leer_archivo(archivo_csv)
                print(f"Contactos leídos desde el archivo: {archivo_csv}")
                archivo_leido = archivo_csv  # Actualizar archivo_leido
                break
            except FileNotFoundError:
                print(f"Error: No se encontró el archivo {archivo_csv}. Intenta de nuevo.")

    try:
        while True:
            print("\nMenú del Directorio")
            print("1. Actualizar contacto.")
            print("2. Agregar contacto.")
            print("3. Buscar contacto por nombre completo.")
            print("4. Buscar contactor por nombre completo y tipo.")
            print("5. Buscar contacto por numero celular.")
            print("6. Buscar contacto por numero de cuenta, de profesor o de coordinador.")
            print("7. Eliminar contacto por nombre completo.")
            print("8. Eliminar contacto por numero celular.")
            print("9. Eliminar contacto por numero de cuenta, de profesor o de coordinador.")
            print("10. Listar todos los contactos.")
            print("11. Listar todos los contactos con correo electrónico.")
            print("12. Listar todos los contactos por carrera.")
            print("13. Listar contactos por salario.")
            print("14. Listar contactos por tipo.")
            print("15. Vaciar el directorio.")
            print("16. Salir.")

            opcion = input("Elige una opción: ")

            if opcion == "1":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():

                    nombre = input("Nombre(s) del contacto a actualizar: ")
                    apellidos = input("Apellidos del contacto a actualizar: ")

                    resultados = directorio.buscar_contacto("nombre", nombre)  # Buscar por nombre

                    contacto_encontrado = None
                    for contacto in resultados:  # Buscar el contacto por nombre y apellidos en los resultados
                        if contacto.apellidos == apellidos:
                            contacto_encontrado = contacto
                            break

                    if contacto_encontrado is None:
                        print("Contacto no encontrado.")
                        continue

                    # Obtener el nuevo tipo de contacto
                    while True:
                        tipo = input("Nuevo tipo de contacto (Alumno/Profesor/Coordinador): ").capitalize()
                        if tipo in ("Alumno", "Profesor", "Coordinador"):
                            break
                        else:
                            print("Tipo de contacto inválido. Inténtalo de nuevo.")

                    # Obtener los nuevos datos del contacto
                    datos_contacto = directorio.obtener_datos_contacto(tipo)  # Llamar al método de instancia

                    # Actualizar el contacto con los nuevos datos
                    try:
                        if tipo == "Alumno":
                            nuevo_contacto = Alumno(**datos_contacto)
                        elif tipo == "Profesor":
                            nuevo_contacto = Profesor(**datos_contacto)
                        elif tipo == "Coordinador":
                            nuevo_contacto = Coordinador(**datos_contacto)
                        else:
                            print("Tipo de contacto no válido.")  # Manejar tipo no válido
                            continue  # Volver al inicio del bucle while

                        if directorio.actualizar_contacto(nombre, apellidos, nuevo_contacto):
                            print("Contacto actualizado exitosamente.")
                        else:
                            print("Error al actualizar el contacto.")
                    except (TypeError, ValueError) as e:
                        print(f"Ocurrió un error al actualizar el contacto: {e}")

            elif opcion == "2":
                # Validación de tipo de contacto.
                while True:
                    tipo = input("Tipo de contacto (Alumno/Profesor/Coordinador): ").capitalize()
                    if tipo in ("Alumno", "Profesor", "Coordinador"):
                        break  # Salir del bucle si el tipo es válido
                    else:
                        print("Tipo de contacto inválido. Inténtalo de nuevo.")

                # Obtener los datos del contacto
                datos_contacto = directorio.obtener_datos_contacto(tipo)

                # Crear el objeto de contacto
                try:
                    if tipo == "Alumno":
                        contacto = Alumno(**datos_contacto)
                    elif tipo == "Profesor":
                        contacto = Profesor(**datos_contacto)
                    elif tipo == "Coordinador":
                        contacto = Coordinador(**datos_contacto)
                    else:
                        print("Tipo de contacto no válido.")
                        continue  # Salir del bucle actual y volver al inicio del while True

                    # Agregar el contacto al Directorio
                    directorio.agregar_contacto(contacto)
                    print("Contacto agregado exitosamente.")
                except (TypeError, ValueError) as e:
                    print(f"Ocurrió un error al crear el contacto: {e}")


            elif opcion == "3":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():
                    nombre = input("Introduce el nombre del contacto a buscar: ")
                    apellidos = input("Introduce los apellidos del contacto a buscar: ")
                    resultados = directorio.buscar_contacto("nombre", nombre)
                    if not resultados.esta_vacia():
                        for contacto in resultados:
                            if contacto.apellidos == apellidos:
                                print("Contacto encontrado:", contacto)
                                break  # Salir del bucle si se encuentra
                        else:  # Este else pertenece al bucle for, se ejecuta si no se encuentra en el bucle
                            print("Contacto no encontrado (apellidos no coinciden).")
                    else:  # Este else pertenece al if principal, se ejecuta si la lista está vacía
                        print("Contacto no encontrado.")

            elif opcion == "4":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():

                    nombre = input("Introduce el nombre del contacto a buscar: ")
                    apellidos = input("Introduce los apellidos del contacto a buscar: ")
                    tipo_str = input("Introduce el tipo de contacto (Alumno/Profesor/Coordinador): ").capitalize()

                    # Convertir el tipo de str a la clase correspondiente
                    tipos_validos = {"Alumno": Alumno, "Profesor": Profesor, "Coordinador": Coordinador}
                    if tipo_str in tipos_validos:
                        tipo = tipos_validos[tipo_str]
                    else:
                        print("Tipo de contacto no válido.")
                        continue  # Volver al menú principal

                    resultados = directorio.buscar_contacto("nombre", nombre)
                    if not resultados.esta_vacia():
                        for contacto in resultados:
                            if contacto.apellidos == apellidos and isinstance(contacto, tipo):  # Verificar apellidos y tipo
                                print("Contacto encontrado:", contacto)
                                break  # Salir del bucle si se encuentra
                        else:  # Este else pertenece al bucle for, se ejecuta si no se encuentra en el bucle
                            print("Contacto no encontrado (apellidos o tipo no coinciden).")
                    else:  # Este else pertenece al if principal, se ejecuta si la lista está vacía
                        print("Contacto no encontrado.")

            elif opcion == "5":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():

                    while True:
                        try:
                            celular = int(input("Introduce el número de celular a buscar: "))
                            break
                        except ValueError:
                            print("Número de celular inválido. Debe ser un número entero.")
                    resultados = directorio.buscar_contacto("celular", celular)
                    if not resultados.esta_vacia():
                        contacto = resultados.primero()  # Obtener el primer contacto de la lista
                        print("Contacto encontrado:", contacto)  # Imprimir la información del contacto (objeto 'Persona')
                    else:
                        print("Contacto no encontrado.")

            elif opcion == "6":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():

                    tipo_str = input("Introduce el tipo de contacto (Alumno/Profesor/Coordinador): ").capitalize()

                    # Convertir el tipo de str a la clase correspondiente
                    tipos_validos = {"Alumno": Alumno, "Profesor": Profesor, "Coordinador": Coordinador}
                    if tipo_str in tipos_validos:
                        tipo = tipos_validos[tipo_str]
                    else:
                        print("Tipo de contacto no válido.")
                        continue  # Volver al menú principal

                    while True:
                        try:
                            numero = int(input("Introduce el número a buscar: "))
                            break
                        except ValueError:
                            print("Número inválido. Debe ser un número entero.")

                    resultados = directorio.buscar_contacto("numero", numero)
                    if not resultados.esta_vacia():
                        for contacto in resultados:
                            if isinstance(contacto, tipo):  # Verificar el tipo
                                print("Contacto encontrado:", contacto)
                                break  # Salir del bucle si se encuentra
                        else:  # Este else pertenece al bucle for, se ejecuta si no se encuentra en el bucle
                            print("Contacto no encontrado (tipo no coincide).")
                    else:  # Este else pertenece al if principal, se ejecuta si la lista está vacía
                        print("Contacto no encontrado.")

            elif opcion == "7":  # Eliminar por nombre completo
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():

                    nombre = input("Introduce el nombre del contacto a eliminar: ")
                    apellidos = input("Introduce los apellidos del contacto a eliminar: ")
                    if directorio.eliminar_contacto("nombre", (nombre, apellidos)):
                        print("Contacto eliminado exitosamente.")
                    else:
                        print("Contacto no encontrado.")


            elif opcion == "8":  # Eliminar por celular
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():

                    celular = int(input("Introduce el celular del contacto a eliminar: "))
                    if directorio.eliminar_contacto("celular", celular):
                        print("Contacto eliminado exitosamente.")
                    else:
                        print("Contacto no encontrado.")

            elif opcion == "9":  # Eliminar por número (cuenta, profesor, coordinador)
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():
                    numero = int(input("Introduce el número de cuenta, profesor o coordinador: "))
                    if directorio.eliminar_contacto("numero", numero):
                        print("Contacto eliminado exitosamente.")
                    else:
                        print("Contacto no encontrado.")

            elif opcion == "10":
            # Verificar si hay contactos en el directorio
                if directorio.verificar_contactos():
                    directorio.listar_contactos()  # Sin criterios ni valor

            elif opcion == "11":
                # Verificar si hay contactos en el directorio
                if directorio.verificar_contactos():
                    directorio.listar_contactos(criterio="email")  # Filtrar por email (sin valor)

            elif opcion == "12":
                # Verificar si hay contactos en el directorio
                if directorio.verificar_contactos():
                    carrera = input("Introduce la carrera a buscar: ")
                    directorio.listar_contactos(criterio="carrera", valor=carrera)  # Filtrar por carrera

            elif opcion == "13":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():
                    try:
                        salario = float(input("Introduce el salario a buscar: "))
                        directorio.listar_contactos(criterio="salario", valor=salario)  # Filtrar por salario
                    except ValueError:
                        print("Salario inválido. Debe ser un número.")

            elif opcion == "14":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():
                    tipo_str = input("Introduce el tipo de contacto (Alumno/Profesor/Coordinador): ").capitalize()
                    tipos_validos = {"Alumno": Alumno, "Profesor": Profesor, "Coordinador": Coordinador}
                    if tipo_str in tipos_validos:
                        tipo = tipos_validos[tipo_str]
                        directorio.listar_contactos(criterio="tipo", valor=tipo)  # Filtrar por tipo
                    else:
                        print("Tipo de contacto no válido.")

            elif opcion == "15":
                # Verificar si hay contactos en el directorio
                if not directorio.verificar_contactos():
                    directorio.vaciar_directorio()

            if opcion == "16":
                # Guardar los datos automáticamente en el archivo "contactos.csv"
                directorio.guardar_archivo("contactos.csv")
                print("Datos guardados automáticamente en contactos.csv")

            # Preguntar al usuario si desea volver al menú principal o salir
            regresar_menu = input("¿Desea regresar al menú principal? (s/n): ").lower()
            if regresar_menu != "s":
                # Si no desea regresar, preguntar si desea guardar los cambios
                guardar_cambios = input("¿Desea guardar los cambios en el directorio antes de salir? (s/n): ").lower()
                if guardar_cambios == "s":
                    nombre_archivo = input("Introduce el nombre del archivo para guardar: ")
                    directorio.guardar_archivo(nombre_archivo)
                    print("Cambios guardados en", nombre_archivo)
                print("Saliendo del programa...")
                break  # Salir del bucle principal
    except Exception as e:
        print(f"Ocurrió un error: {e}")
